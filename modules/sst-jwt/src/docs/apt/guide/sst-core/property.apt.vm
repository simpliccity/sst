 -----
 ${displayTitle} Property Framework
 -----
 Kevin Fox
 -----
 2014-02-26
 -----

 ~~    Copyright 2013 Information Control Corporation
 ~~
 ~~ Licensed under the Apache License, Version 2.0 (the "License");
 ~~ you may not use this file except in compliance with the License.
 ~~ You may obtain a copy of the License at
 ~~
 ~~     http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing, software
 ~~ distributed under the License is distributed on an "AS IS" BASIS,
 ~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~~ See the License for the specific language governing permissions and
 ~~ limitations under the License.

 ~~ NOTE: For help with the syntax of this file, see:
 ~~ http://maven.apache.org/doxia/references/apt-format.html

${displayTitle} Property Framework

  With version 3.1, the core Spring framework introduced {{{http://spring.io/blog/2011/02/15/spring-3-1-m1-unified-property-management/}Unified Property Management}}.  
  This provides a standard way for Spring applications to incorporate externally-managed settings to configure 
  their behavior.  Unified Property Management depends on the <<<PropertySource>>> abstraction to allow the framework 
  to remain agnostic of the specific source(s) of configuration information employed for any particular environment 
  and application.

  Prior to the release of Spring 3.1, the developers of <<SST>> found it necessary to define their own framework
  for dealing with externalized application properties.  Because this framework contained some unique elements
  not included as part of Unified Property Management, it was preserved and adapted to integrate with the new
  Spring approach once version 3.1 was in general use.

%{toc|section=1|fromDepth=2|toDepth=3}
  
* Using the SST Property Framework Directly

  The <<SST Property Framework>> was designed to work with versions of the core Spring framework prior to 3.1.
  While it is still possible to use the <<Property Framework>> directly, as described in this section, with later
  versions of Spring, the developer should be aware that certain functionality, such as support for multiple environments
  and the ability to resolve properties outside bean definitions in bean configuration files, will be sacrificed.
  In order to get the full benefit of both the <<Property Framework>> and property support provided by current Spring
  versions, use the approach described for {{Incorporating the SST Property Framework into Unified Property Management}},
  instead.
  
** Custom implementations of <<<PropertiesFactoryBean>>> and <<<PropertyPlaceholderConfigurer>>>

  In older versions of Spring, there were a couple of different ways that properties could be referenced through
  placeholders.  In the first case, mechanisms such as the <<<@Value>>> annotation could be used to perform
  expression-driven dependency injection.  The expressions could include placeholders for properties that
  appeared in a <<<Properties>>> instance produced by the <<<PropertiesFactoryBean>>>.  Secondly, the
  <<<PropertyPlaceholderConfigurer>>> bean factory post-processor could be used to replace placeholders in XML 
  configuration files with the appropriate property value.
  
  In both cases, the beans involved were limited in terms of the available sources of property settings: the bean
  definitions could specify either or both of a set of individual properties and a classpath resource location
  from which to load properties.  The <<Property Framework>> provides custom implementations of these bean classes
  that can, instead, delegate the loading of properties to any class implementing the {{PropertyLoader interface}}:
  <<<DelegatingPropertiesFactoryBean>>> and <<<DelegatingPropertyPlaceholderConfigurer>>>.
  
  While it is possible to configure beans based on the two custom classes, manually, most applications should
  employ the {{Custom namespace property support}}, instead.  

** Custom namespace property support

  The <<sst>> custom namespace includes an element that automatically configures beans of the classes listed above
  to enable support for the <<Property Framework>>.  
  
  To use the custom namespace in an application context configuration file, first add the namespace definition to the 
  <<<\<beans\>>>> tag at the top of the file:
  
  \[text:ComplexTransformationCacheJoinIT.xml:xml! customNamespace \]
 
  Notice, the definition of the <<sst>> namespace and the corresponding entry in the <<<schemaLocation>>>.  The XSD file for 
  the namespace is bundled in the <<<sst-core>>> JAR file, along with the rest of the <<Property Framework>>, so this must be 
  included on the application classpath.
  
  The <<<\<sst:property\>>>> tag can then be used to enable and configure the <<Property Framework>>.  It requires a single 
  attribute that specifies a bean implementing the {{PropertyLoader interface}} to be used to retrieve the desired properties.
  
  \[text:JdbcPropertyConfigurationIT.xml:xml! propertyConfig \]  

** <<<PropertyLoader>>> interface

  The prime feature of the <<Property Framework>> is its ability to extend the property support inherent in core Spring to
  allow retrieval of property information from stores other than classpath resources.  The <<<PropertyLoader>>> interface
  defines the simple contract for an implementation class to support a new type of information store.
  
 \[jc:org.simpliccity.sst.property.PropertyLoader\]

  The <<Property Framework>> includes several useful implementations of <<<PropertyLoader>>>.
  
*** <<<ClassPathResourcePropertyLoader>>> implementation

  <<<ClassPathResourcePropertyLoader>>> provides equivalent functionality to core Spring, namely the ability to read
  properties from a resource, in standard properties format, that appears on the classpath.  This implementation is
  included so that the functionality can be combined in a standard way with other <<<PropertyLoader>>> implementations
  (see {{OrderedDelegatingPropertyLoader implementation}} for an example of where this would be used).  
  
*** <<<JdbcPropertyLoader>>> implementation

  The <<Property Framework>> includes an implementation of <<<PropertyLoader>>> that reads property information from a
  database query in a generic fashion.  {{{../../apidocs/org/simpliccity/sst/property/JdbcPropertyLoader.html}JdbcPropertyLoader}}
  can be configured, using the following properties, to adapt to nearly any SQL-based source of key/value pairs.
  
*----------------------------*-------------------------------------------------------------------------------*
| <<Property>>               | <<Purpose>>                                                                   |
*----------------------------+-------------------------------------------------------------------------------+
| <<<jdbcTemplate>>>         | An instance of a Spring <<<JdbcTemplate>>> bean configured to reference the   |
|                            | appropriate database.                                                         |
*----------------------------+-------------------------------------------------------------------------------+
| <<<sqlQuery>>>             | A SQL query that returns a set of rows representing the desired properties.   |
*----------------------------+-------------------------------------------------------------------------------+
| <<<keyColumn>>>            | The name of the column in the query result set that holds the property key.   |
*----------------------------+-------------------------------------------------------------------------------+
| <<<valueColumn>>>          | The name of the column in the query result set that holds the property value. |  
*----------------------------+-------------------------------------------------------------------------------+

  The following example illustrates a basic use of <<<JdbcPropertyLoader>>>:
  
  \[text:JdbcPropertyConfigurationIT.xml:xml! propertyConfig \]  
  
*** <<<OrderedDelegatingPropertyLoader>>> implementation

  <<<OrderedDelegatingPropertyLoader>>> provides a way to combine multiple <<<PropertyLoader>>> beans together to load an
  aggregate set of properties.  For example, it might be desirable to use both a <<<ClassPathResourcePropertyLoader>>>, to
  read some properties from a file resource, and a <<<JdbcPropertyLoader>>>, to read some from a database query.  In this
  scenario, the file resource might contain default property values that could be overridden by environment-specific values 
  loaded from a database.
  
  Note that, because a particular property could be defined in more than one of the specified loaders, <<<OrderedDelegatingPropertyLoader>>>
  defines an order of precedence: the value retrieved from a loader appearing later in the list overrides a value from
  one listed earlier.  This should be kept in mind when configuring the bean definition.  For example, the <<<delegatingPropertyLoader>>>
  and <<<alternateDelegatingPropertyLoader>>> beans in the following excerpt may resolve a particular property key differently.
  
  \[text:PropertyLoaderTest.xml:xml! delegatingPropertyLoader \]  
  
* Incorporating the SST Property Framework into Unified Property Management

  The support for Unified Property Management in Spring 3.1 provides a more integrated solution for managing externalized properties
  than the <<Property Framework>> can.  Among other things, it integrates seamlessly with Spring's support for environment-specific
  configurations, incorporates, by convention, a variety of common sources of property information not covered by prior Spring versions
  and is used to resolve expressions in ways that the <<Property Framework>> cannot.  For applications using Spring 3.1 or higher,
  Unified Property Management is the recommended approach.
  
  There are, however, some unique features, such as the ability to load property information from a database query, that the 
  <<Property Framework>> provides.  This section describes how to take advantage of those features from within the context
  of Unified Property Management.

** <<<PropertyLoaderPropertySource>>> adapter class

  Unified Property Management abstracts the various possible sources of externalized property information behind a <<<PropertySource>>>
  generic abstract class.  Spring provides a number of concrete implementations, such as <<<MapPropertySource>>>, <<<ServletConfigPropertySource>>>
  and <<<JndiPropertySource>>>.
  
  The <<Property Framework>> includes an adapter class, {{{../../apidocs/org/simpliccity/sst/property/source/PropertyLoaderPropertySource.html}PropertyLoaderPropertySource}},
  that maps between Spring's <<<PropertySource>>> abstraction and its own <<<PropertyLoader>>>.  A <<<PropertySource>>> bean defined using this
  class can be configured to retrieve properties from any <<<PropertyLoader>>> bean.  So, for example, this can be used to define a
  <<PropertySource>> that uses the <<<JdbcPropertyLoader>>> class to retrieve property information from a database, as illustrated in the
  following example.
  
 \[jc:org.simpliccity.sst.property.source.PropertyLoaderPropertySourceIT:--- UserGuide propertyLoaderPropertySource ---; highlight -ughighlight-\]
 
 Here, the <<<JdbcPropertyLoaderBuilder>>> class is used to directly create a bean instance of <<<JdbcPropertyLoader>>>, since it is
 required before the application context is actually loaded.
 
 \[jc:org.simpliccity.sst.property.source.JdbcPropertyLoaderBuilder\]
 
  
