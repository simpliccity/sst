/*
 *    Copyright 2011 Information Control Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.simpliccity.sst.property;

import java.io.IOException;
import java.util.Arrays;
import java.util.Properties;

/**
 * An implementation of {@link PropertyLoader} that delegates the loading of properties
 * to a sequence of other loaders.  The final {@link java.util.Properties} instance
 * will contain properties loaded by all of the loaders.  If a property name is loaded
 * by more than one loader, the value will be that generated by the last loader in
 * the sequence which contains the name in question.
 * 
 * @author Kevin Fox
 *
 */
public class OrderedDelegatingPropertyLoader implements PropertyLoader 
{
	private PropertyLoader[] loaders;
	
	/**
	 * Returns the list of {@link PropertyLoader} instances which this class
	 * will use to load properties.
	 * 
	 * @return An array of {@link PropertyLoader} instances used to load
	 * properties.
	 */
	public PropertyLoader[] getLoaders() 
	{
		// Returns copy of array to avoid external manipulation of the array itself
		return (loaders == null) ? null : Arrays.copyOf(loaders, loaders.length);
	}

	/**
	 * Specifies the list of {@link PropertyLoader} instances which this class
	 * will use to load properties.  The order of the loaders determines
	 * which value will take precedence in the case of overlapping property
	 * names.  The last loader in sequence to load a particular property
	 * will determine its value. 
	 * 
	 * @param loaders An array of {@link PropertyLoader} instances used to load 
	 * properties.
	 */
	public void setLoaders(PropertyLoader[] loaders) 
	{
		// Makes copy of input array to avoid external manipulation of the array itself
		this.loaders = (loaders == null) ? null : Arrays.copyOf(loaders, loaders.length);
	}

	@Override
	public void loadProperties(Properties props) throws IOException 
	{
		for (PropertyLoader loader : getLoaders())
		{
			loader.loadProperties(props);
		}

	}
}
